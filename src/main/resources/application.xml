<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.cyc" />
    <!--需要增强的类：配置Spring的IoC，把Service对象配置进来-->
    <!--<bean id="accountService" class="com.cyc.service.impl.AccountServiceImpl"></bean>-->

    <!--Spring中基于xml的AOP配置步骤
        1.把通知Bean也交给Spring来管理
        2.使用aop:config标签标明开始AOP的配置
        3.使用aop：aspect标签标明配置切面
                id属性：是给切面提供一个唯一标识
                ref属性：是指定通知类bean的ID
        4.在aop:aspect标签的内部使用对应标签来配置通知的类型
                我们现在示例是让printLog方法在切入点方法执行之前，所以是前置通知
                aop:before:表示配置前置通知
                    method属性：用于指定Logger类中哪个方法是前置通知
                    pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强

            切入点表达式的写法：
                关键字：execution(表达式)
                表达式：
                    访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)
                访问修饰符可以省略
                返回值可以使用通配符*  表示任意包，但是有几级包，就需要写几个*
                包名可以使用*..表示当前包及其子包
                类名和类名都可以使用*来实现通配
                参数列表：
                    可以直接写数据类型
                        基本数据直接写名称      int
                        引用类型写包名.类名的方式       java.lang.String
                     可以使用通配符表示任意类型，但是必须有参数
                     可以使用..表示有无参数均可，有参数可以是任意参数
                全通配写法：
                  * *..*.*(..)

                实际开发中切入点表达式的通常写法：
                    切入到业务层实现类下的所有方法
                        * com.cyc.service.impl.*.*(..)

     -->

    <!--提供增强方法的类：配置Logger类-->
    <!--<bean id="logger" class="com.cyc.util.Logger"></bean>-->

    <!--配置AOP-->
    <!--<aop:config>
        &lt;!&ndash;配置切面&ndash;&gt;
        <aop:aspect id="logAdvice" ref="logger">
            &lt;!&ndash;配置通知的类型，并且建立通知方法和切入点方法的关联&ndash;&gt;
            &lt;!&ndash;缺少execution会报 Pointcut is not well-formed: expecting '(' at character position 7 错误&ndash;&gt;

            &lt;!&ndash;配置切入点表达式，id属性用于指定表达式的唯一标识. expression属性指定表达式内容
                此标签写在aop:aspect标签内部只能当前切面使用&ndash;&gt;
            <aop:pointcut id="pt1" expression="execution(* com.cyc.service.impl.*.*(..))"/>

            &lt;!&ndash;配置前置通知:在切入点方法执行之前执行&ndash;&gt;
            <aop:before method="beforeLogin" pointcut-ref="pt1"></aop:before>

            &lt;!&ndash;配置后置通知：在切入点方法正常执行之后执行。
                它和异常通知永远只能执行一个，因为若在方法执行之中产生异常，则后面的代码就不会执行，直接跳转到异常处理代码块中&ndash;&gt;
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"></aop:after-returning>

            &lt;!&ndash;配置异常通知：在切入点方法执行产生异常之后执行
                它和后置通知永远只能执行一个，因为若在方法执行之中产生异常，则后面的代码就不会执行，直接跳转到异常处理代码块中&ndash;&gt;
            <aop:after-throwing method="afterThrowingLog" pointcut-ref="pt1"></aop:after-throwing>

            &lt;!&ndash;配置最终通知：无论切入点时候正常执行它都会在其后面执行&ndash;&gt;
            <aop:after method="afterLog" pointcut-ref="pt1"></aop:after>

            <aop:around method="aroundPrintLog" pointcut-ref="pt1" />
        </aop:aspect>
    </aop:config>-->

    <!--配置Spring开启注解AOP的支持-->
    <aop:aspectj-autoproxy />

</beans>